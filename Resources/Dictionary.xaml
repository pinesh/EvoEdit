<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->

<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes">
    
    <Color x:Key="MainColor">#FF595959</Color>
    <Color x:Key="HoverColor">#FF393939</Color>
    <Color x:Key="DefaultColor">#FF9BB1C5</Color>
    <SolidColorBrush x:Key="LightBrush" Color="#FF333333" />
    <SolidColorBrush x:Key="ShadeBrush" Color="#FF434343" />

    <Color x:Key="TopGradientSelectColor">#FFFFFFFF</Color>
    <Color x:Key="BottomGradientSelectColor">#FF737373</Color>

    <Color x:Key="BlackColor">#FF000000</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>

    <SolidColorBrush x:Key="TextBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="NormalBrush" Color="{StaticResource MainColor}" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#FF333333" />
    <SolidColorBrush x:Key="HoverBrush" Color="{StaticResource HoverColor}" />
    <SolidColorBrush x:Key="GlyphBrush" Color="#FFD1D1D1" />

    <LinearGradientBrush x:Key="PressedBrush" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#4C000000" Offset="0" />
        <GradientStop Color="#26FFFFFF" Offset="1" />
        <GradientStop Color="#4C000000" Offset="0.467" />
        <GradientStop Color="#26FFFFFF" Offset="0.479" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ControlBackgroundBrush" Color="#FF333333" />

    <LinearGradientBrush x:Key="SelectedBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource TopGradientSelectColor}" Offset="0" />
        <GradientStop Color="{StaticResource BottomGradientSelectColor}" Offset="1" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#FF787878" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FF595959" />

    <SolidColorBrush x:Key="CalendarDayButtonTodayBackgroundBrush" Color="#FFAAAAAA"/>
    <SolidColorBrush x:Key="CalendarButtonFocusBorderBrush" Color="#FFBABABA"/>

    <!-- EXPRESSION COMMON VALUES -->

    <LinearGradientBrush x:Key="ShineBrush" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#59FFFFFF" Offset="0" />
        <GradientStop Color="#00FFFFFF" Offset="1" />
        <GradientStop Color="#26FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HoverShineBrush" EndPoint="0.5,0.971" StartPoint="0.5,0.042">
        <GradientStop Color="#4CFFFFFF" Offset="0" />
        <GradientStop Color="#26FFFFFF" Offset="1" />
        <GradientStop Color="#26FFFFFF" Offset="0.467" />
        <GradientStop Color="#00FFFFFF" Offset="0.475" />
        <GradientStop Color="#00FFFFFF" Offset="0.856" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#444" Offset="0.0" />
        <GradientStop Color="#888" Offset="1.0" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DefaultedBorderBrush" Color="{StaticResource DefaultColor}" />
    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0" />
        <GradientStop Color="#EBEBEB" Offset="0.5" />
        <GradientStop Color="#DDDDDD" Offset="0.5" />
        <GradientStop Color="#CDCDCD" Offset="1" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />


    

    

    <SolidColorBrush x:Key="ForeBrush" Color="Black" Opacity="0.5" />
    <SolidColorBrush x:Key="ForeHighlightBrush" Color="Black" Opacity="0.8" />
    <SolidColorBrush x:Key="ConfirmHighlightBrush" Color="#80b3ff" />

    <!-- Evo Edit Title Bar button template -->
    <Style x:Key="TitleBarButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="#6D6E71" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
					x:Name="border"
					Background="Transparent"
					BorderThickness="0"
					SnapsToDevicePixels="true">
                        <ContentPresenter
						x:Name="contentPresenter"
						Margin="0"
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Focusable="False"
						RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#464547" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#464547" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WindowMainPanelStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                <Setter Property="BorderThickness" Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Evo Edit Title Bar button template -->
    <Style x:Key="TitleBarCloseButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="#6D6E71" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
					x:Name="border"
					Background="Transparent"
					BorderThickness="0"
                    SnapsToDevicePixels="true">
                        <Grid>
                            <Path x:Name="IconPath"
                                Width="46"
                                Height="32"
                                Data="M 18,11 27,20 M 18,20 27,11"
                                Stroke="#6D6E71"
                                StrokeThickness="1" />
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Focusable="False"
                                RecognizesAccessKey="True" />
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="DarkRed" />
                            <Setter  TargetName="IconPath" Property="Stroke" Value="White" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="DarkRed" />
                            <Setter  TargetName="IconPath" Property="Stroke" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Evo Edit Export button template -->
    <Style x:Key="ExportButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="#ECE9E9" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
					x:Name="border"
					Background="#3A7F45"
                    BorderBrush="#2BB673"
                    CornerRadius="2"
					BorderThickness="2"
                    SnapsToDevicePixels="true">
                        <Grid>
                            <Border
                                Name="GradientElement"
                                Width="Auto"
                                Margin="0,0,0,0"
                                HorizontalAlignment="Stretch"
                                BorderThickness="1"
                                Background="#3A7F45">
                                <Grid>
                                    <Label FontFamily="pack://application:,,,/Resources/fonts/#Osiris" FontSize="30" Foreground="#ECE9E9" HorizontalAlignment="Center" VerticalAlignment="Center">Export
                                    </Label>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      RecognizesAccessKey="True"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                                </Grid>
                                <Border.BorderBrush>
                                    <LinearGradientBrush MappingMode="Absolute" StartPoint="-2,-3.5" EndPoint="62,65">
                                        <GradientStop Color="Black" />
                                        <GradientStop Color="#000066FF" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                            </Border>
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#2BB673"/>
                            <Setter TargetName="GradientElement" Property="BorderBrush">
                                <Setter.Value>
                                    <LinearGradientBrush MappingMode="Absolute" StartPoint="-2,-3.5" EndPoint="62,65">
                                        <GradientStop Color="#000066FF" />
                                        <GradientStop Color="#ECE9E9" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter TargetName="GradientElement" Property="Background" Value="#2BB673"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyle" TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="IsSelected" Value="{Binding IsInitiallySelected, Mode=OneTime}" />
        <Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
    </Style>

    <HierarchicalDataTemplate 
        x:Key="CheckBoxItemTemplate"
        ItemsSource="{Binding Children, Mode=OneWay}"
    >
        <StackPanel Orientation="Horizontal">
            <!-- These elements are bound to a FooViewModel object. -->
            <CheckBox
                Focusable="False" 
                Style="{DynamicResource EvoEditCheckboxStyle}"
                IsChecked="{Binding IsChecked}" 
                VerticalAlignment="Center"
            />
            <ContentPresenter 
                TextBlock.FontFamily="pack://application:,,,/Resources/fonts/Inter/#Inter Regular"  TextBlock.FontSize="14"  TextBlock.Foreground="#ECE9E9"
                Content="{Binding Name, Mode=OneWay}" 
                Margin="2,0"
            />
        </StackPanel>
    </HierarchicalDataTemplate>
    <!-- Evo Edit Export button template -->
    <Style x:Key="EvoEditStandardButton" TargetType="Button">
        <Setter Property="Foreground" Value="#ECE9E9" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
					x:Name="border"
                    CornerRadius="2"
					Background="#414042"
                    BorderBrush="#58595B"
					BorderThickness="1"
                    SnapsToDevicePixels="true">
                        <Grid>
                            <Label HorizontalAlignment="Center" FontFamily="pack://application:,,,/Resources/fonts/Inter/#Inter Regular" VerticalAlignment="Center"  Height="22" FontSize="14" Foreground="#ECE9E9" Margin="5,0"></Label>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#4D4D4F"/>
                            <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#939598"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EvoEditStandardRedButton" TargetType="Button">
        <Setter Property="Foreground" Value="#ECE9E9" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        CornerRadius="2"
                        Background="DarkRed"
                        BorderThickness="1"
                        SnapsToDevicePixels="true">
                        <Grid>
                            <Label HorizontalAlignment="Center" FontFamily="pack://application:,,,/Resources/fonts/Inter/#Inter Regular" VerticalAlignment="Center"  Height="22" FontSize="14" Foreground="#ECE9E9" Margin="5,0"></Label>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#b00000"/>
                            <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#b00000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SettingButton" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="#414042" BorderBrush="#58595B" BorderThickness="1">
                        <ContentPresenter Margin="5,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          TextBlock.FontFamily="pack://application:,,,/Resources/fonts/Inter/#Inter Regular"  TextBlock.FontSize="14"  TextBlock.Foreground="#ECE9E9"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">

                            <Setter TargetName="border" Property="Background" Value="#4D4D4F"></Setter>
                            <Setter TargetName="border" Property="BorderBrush" Value="#939598"></Setter>
                            <Setter TargetName="border" Property="BorderThickness" Value="2"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <DrawingImage x:Key="SubArrow">
        <DrawingImage.Drawing>
            <GeometryDrawing Brush="#939598" Geometry="M19,15L13,21L11.58,19.58L15.17,16H4V4H6V14H15.17L11.58,10.42L13,9L19,15Z" />
        </DrawingImage.Drawing>
    </DrawingImage>


    <DrawingImage x:Key="EvoEditCheckboxChecked">
        <DrawingImage.Drawing>
            <DrawingGroup ClipGeometry="M0,0 V12 H12 V0 H0 Z">
                <GeometryDrawing Brush="#000000">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="2,2,10,10"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="#414042">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0.375,0.375,9.25,9.25"/>
                    </GeometryDrawing.Geometry>
                    <GeometryDrawing.Pen>
                        <Pen Thickness="0.75" Brush="#6D6E71"/>
                    </GeometryDrawing.Pen>
                </GeometryDrawing>
                <GeometryDrawing Brush="#39B54A">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="2,2,6,6"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>


    <DrawingImage x:Key="EvoEditCheckboxUnchecked">
        <DrawingImage.Drawing>
            <DrawingGroup ClipGeometry="M0,0 V12 H12 V0 H0 Z">
                <GeometryDrawing Brush="#000000">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="2,2,10,10"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="#414042">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0.375,0.375,9.25,9.25"/>
                    </GeometryDrawing.Geometry>
                    <GeometryDrawing.Pen>
                        <Pen Thickness="0.75" Brush="#6D6E71"/>
                    </GeometryDrawing.Pen>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>


    <Style x:Key="EvoEditCheckboxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal">
                        <Image x:Name="checkboxImage" Source="{StaticResource EvoEditCheckboxUnchecked}" Width="16" />
                        <ContentPresenter />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkboxImage" Property="Source"
                                    Value="{StaticResource EvoEditCheckboxChecked}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
    <xctk:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />
    <xctk:AdditionConverter x:Key="AdditionConverter" />
    <xctk:ColorModeToTabItemSelectedConverter x:Key="ColorModeToTabItemSelectedConverter" />
    <Style x:Key="ColorPickerToggleButtonStyle"
         TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Padding="{TemplateBinding Padding}"
                      SnapsToDevicePixels="True">
                                <ContentPresenter Content="{TemplateBinding Content}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                            </Border>

                            <xctk:ButtonChrome x:Name="ToggleButtonChrome"
                                               Grid.Column="1"
                                   CornerRadius="0"
                                   Visibility="{Binding ShowDropDownButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:ColorPicker}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:ColorPicker}}"
                                   RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:ColorPicker}}"
                                   RenderMouseOver="{TemplateBinding IsMouseOver}"
                                               RenderPressed="{TemplateBinding IsPressed}">

                                <Grid>
                                    <Border x:Name="ToggleTemplateRoot"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                                        <Border x:Name="splitBorder"
                                    Margin="0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    BorderBrush="Transparent"
                                    BorderThickness="0">
                                            <Path x:Name="arrow"
                                      Width="{x:Static wpf:Constants.ComboBoxArrowSize}"
                                      Height="{x:Static wpf:Constants.ComboBoxArrowSize}"
                                      Margin="0"
                                      Stretch="Uniform"
                                      HorizontalAlignment="Right"
                                      VerticalAlignment="Center"
                                      Data="M7,10L12,15L17,10H7Z"
                                      Fill="{TemplateBinding BorderBrush}"
                                      RenderTransformOrigin="0.5,0.5" />
                                        </Border>
                                    </Border>
                                </Grid>
                              
                            </xctk:ButtonChrome>
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ToggleTemplateRoot" Property="BorderBrush" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ToggleTemplateRoot" Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleY="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key ="HollowBackground"  Color="#282829" Opacity="1"></SolidColorBrush>

    <DataTemplate x:Key="ColorTemplate">
        <StackPanel Orientation="Horizontal">
            <xctk:ColorPicker SelectedColor="{Binding Path=ColorOld}" Width="50"  ShowDropDownButton ="False" IsHitTestVisible="False" BorderThickness="0" Background="{DynamicResource HollowBackground}" />
            <Label Margin="5,0" Content="{Binding Path= MaterialName}" Width="45" IsHitTestVisible="True"></Label>
            <Image Source="icons/icon_009.png" Height="20" IsHitTestVisible="False"></Image>
            <xctk:ColorPicker Margin="5,0" Width="70" SelectedColor="{Binding Path=ColorNew}" AvailableColors="{Binding Path=AllColors}" DropDownBackground="#4D4D4F" DropDownBorderBrush="#939598" StandardColors="{Binding Path = NonstandardColors}"  BorderThickness="0" Background="{DynamicResource HollowBackground}" StandardColorsHeader="Paints Present On Entity" AvailableColorsHeader="Paint Palette" ButtonStyle="{DynamicResource ColorPickerToggleButtonStyle}"/>
            <ComboBox Style="{DynamicResource MaterialDesignComboBox}" Margin="5,0" Width="60"  SelectedIndex="{Binding Path= MaterialIndexNew}">
                <ComboBoxItem Content="Steel"></ComboBoxItem>
                <ComboBoxItem Content="Gold"></ComboBoxItem>
                <ComboBoxItem Content="Brass"></ComboBoxItem>
                <ComboBoxItem Content="Copper"></ComboBoxItem>
                <ComboBoxItem Content="Silver"></ComboBoxItem>
                <ComboBoxItem Content="Dark"></ComboBoxItem>
                <ComboBoxItem Content="Matte"></ComboBoxItem>
            </ComboBox>
            <CheckBox Name="KeepBox" Style="{DynamicResource EvoEditCheckboxStyle}" IsChecked="{Binding Path = RemoveBool}" FontFamily="pack://application:,,,/Resources/fonts/Inter/#Inter Regular" FontSize="14" Foreground="#ECE9E9"></CheckBox>
        </StackPanel>
    </DataTemplate>
    <DrawingImage x:Key="EvoDivider">
        <DrawingImage.Drawing>
            <GeometryDrawing Geometry="M1.09998 1.10001V18.5" >
                <GeometryDrawing.Pen>
                    <Pen EndLineCap="Round" Thickness="2" StartLineCap="Round" MiterLimit="10" Brush="#464547"></Pen>
                    </GeometryDrawing.Pen>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="BackArrow">
        <DrawingImage.Drawing>
            <GeometryDrawing Brush="Black" Geometry="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z"  />
        </DrawingImage.Drawing>
    </DrawingImage>
    <DrawingImage x:Key="ForeArrow">
        <DrawingImage.Drawing>
            <GeometryDrawing Brush="#ECE9E9" Geometry="M4,11V13H16L10.5,18.5L11.92,19.92L19.84,12L11.92,4.08L10.5,5.5L16,11H4Z" />
        </DrawingImage.Drawing>
    </DrawingImage>

</ResourceDictionary>